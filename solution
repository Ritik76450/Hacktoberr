class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

class BinaryTree:
    def __init__(self, root):
        self.root = Node(root)

    def insert(self, value, node=None):
        if node is None:
            node = self.root
        if value < node.val:
            if node.left is None:
                node.left = Node(value)
            else:
                self.insert(value, node.left)
        else:
            if node.right is None:
                node.right = Node(value)
            else:
                self.insert(value, node.right)

    def inorder_traversal(self, node=None):
        if node is None:
            node = self.root
        result = []
        if node.left:
            result += self.inorder_traversal(node.left)
        result.append(node.val)
        if node.right:
            result += self.inorder_traversal(node.right)
        return result

# Example usage:
if __name__ == "__main__":
    tree = BinaryTree(4)
    tree.insert(2)
    tree.insert(1)
    tree.insert(3)
    tree.insert(6)
    tree.insert(5)
    tree.insert(7)

    print("Inorder Traversal:")
    print(tree.inorder_traversal())  # Output: [1, 2, 3, 4, 5, 6, 7]
